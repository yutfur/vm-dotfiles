vim9script

# 設定(量)は最小限にする・極力減らす (原則、標準割当/標準機能/標準動作を使う・重んじること)
# 特にキーバインドを変える(コマンドの割当変更/機能変更/動作変更などの)設定(量)は最小限にする・極力減らす (原則、標準割当/標準機能/標準動作を使う・重んじること)

# -------------------------------------------------------------------------------------------
# 全般
# -------------------------------------------------------------------------------------------

# Vim 内で使われる文字コード
set encoding=utf-8

# ファイル書き込み時の文字コード
set fileencoding=utf-8

# ファイル読み込み時の文字コード (左側が優先される)
set fileencodings=utf-8,iso-2022-jp,euc-jp,sjis,cp932

# 使われる改行コード
set fileformats=unix,dos,mac

# Vim Script で使われる文字コード ( encoding オプションよりも下に置く)
scriptencoding utf-8

# 全ての数を10進数として扱う
set nrformats=

# プラグイン及びその設定の読み込み ( vim-plug の call plug#end() の後に colorscheme 設定を記述しろとあるので)
# https://mattn.kaoriya.net/software/vim/20191231001537.htm
source $HOME/vm-dotfiles/.vim/plugins.vim

# 行番号を表示する
set number

# 現在行を強調表示する
set cursorline

# 編集しているファイルの形式を自動検出して、そのファイル形式用のプラグインとインデントの設定を自動で読み込む
filetype plugin indent on

# -------------------------------------------------------------------------------------------
# ファイル
# -------------------------------------------------------------------------------------------

# アンドゥファイルを作成する
set undofile

# アンドゥファイルの出力先 (下記に出力先として指定したパスのディレクトリを事前に作成しておくこと)
set undodir=$HOME/.vim/recovery

# 保存されていないファイルがあるときでも別のファイルを開けるようにする
set hidden

# ファイルがVimの内部では変更されてないが、Vimの外部で変更されたことが判明したとき、自動的に読み直す
set autoread

# 開かれた/選択されたファイルを含んでいるディレクトリを自動的にカレントディレクトリとする
set autochdir

# -------------------------------------------------------------------------------------------
# 入力
# -------------------------------------------------------------------------------------------

# Linux のシステムクリップボードを共有する
# https://dev.to/aloon/vim-neovim-and-the-clipboard-in-linux-42lg
# https://stackoverflow.com/questions/17561706/vim-yank-does-not-seem-to-work
# https://teratail.com/questions/27361
# Linux は+レジスタを使う、即ち、unnamedではなくunnamedplusを使う
set clipboard=unnamedplus

# 挿入(インサート)モード・コマンドラインモード終了時に IME (日本語入力)をオフにする (Fcitx 5)
# https://wonwon-eater.com/linux-vim-neovim-ime/
if executable('fcitx5')
    autocmd InsertLeave * :call system('fcitx5-remote -c')
    autocmd CmdlineLeave * :call system('fcitx5-remote -c')
endif

# 入力中の/入力したコマンド(の一部)を画面の最下行に表示する
set showcmd

# 曖昧幅文字を全て全角文字幅で処理する
# https://www.soum.co.jp/misc/vim-no-susume/12/#id4
set ambiwidth=double

# 不可視文字を可視化する
# https://maku77.github.io/p/s596qii/
# https://qiita.com/pollenjp/items/459a08a2cc59485fa08b
# https://scribble.washo3.com/vim-listchar
set list
set listchars=tab:»-,trail:-,eol:↲,extends:»,precedes:«,nbsp:%

# 自動インデントを有効化する
# https://vim-jp.org/vimdoc-ja/indent.html
set smartindent

# インデント 1 つ分の幅を半角スペース 4 つ分とし、Tab を半角スペースに変換する・半角スペースを Tab に変換しない
# https://vim-jp.org/vimdoc-ja/options.html
# https://yu8mada.com/2018/08/26/i-ll-explain-vim-s-5-tab-and-space-related-somewhat-complicated-options-as-simply-as-possible/
set softtabstop=4
set shiftwidth=4
set expandtab

# コマンドラインモードで Tab キーによる補完を有効にする
# https://vim-jp.org/vimdoc-ja/options.html#'wildmenu'
# https://vim-jp.org/vimdoc-ja/options.html#'wildoptions'
# https://vim-jp.org/vimdoc-ja/options.html#'wildmode'
# https://atomitech.jp/hinemos/study/other-service/vim-bash/
set wildoptions=pum
set wildmode=list:longest

# コマンドライン履歴と検索パターン履歴を1000件まで保存する
set history=1000

# 対応するペア記号を定義する
# https://vim-jp.org/vimdoc-ja/options.html#'matchpairs'
set matchpairs+=(:),{:},[:],<:>
# 対応するペア記号を強調表示する
# https://vim-jp.org/vimdoc-ja/options.html#'showmatch'
set showmatch

# ペア記号を自動補完する
# https://qiita.com/shingargle/items/dd1b5510a0685837504a
inoremap ( ()<Left>
inoremap { {}<Left>
inoremap [ []<Left>
inoremap < <><Left>
inoremap ' ''<Left>
inoremap " ""<Left>
# HTML / XML の閉じタグを自動補完する
# https://vim-jp.org/vim-users-jp/2009/06/06/Hack-22.html
augroup MyXML
    autocmd!
    autocmd Filetype xml inoremap <buffer> </ </<C-x><C-o>
    autocmd Filetype html inoremap <buffer> </ </<C-x><C-o>
augroup END

# 括弧ジャンプを拡張する
packadd! matchit

# ファイル書き込み時に行末の空白を削除する
autocmd BufWritePre * :%s/\s\+$//ge

# ペースト時の自動コメントアウトをオフにする
augroup auto_comment_off
    autocmd!
    autocmd BufEnter * setlocal formatoptions-=r
    autocmd BufEnter * setlocal formatoptions-=o
augroup END

# ファイルを開いた時に最後のカーソル位置を復元する
# https://zenn.dev/4513echo/articles/2021-12-11-vim-restore-cursor-ext
augroup restore-cursor
    autocmd!
    autocmd BufReadPost *
        \ : if line("'\"") >= 1 && line("'\"") <= line("$")
        \ |   exe "normal! g`\""
        \ | endif
    autocmd BufWinEnter *
        \ : if empty(&buftype) && line('.') > winheight(0) / 2
        \ |   execute 'normal! zz'
        \ | endif
augroup END

# -------------------------------------------------------------------------------------------
# 検索・置換
# -------------------------------------------------------------------------------------------

# 検索時に検索件数メッセージを表示する
set shortmess-=S

# 検索文字列が小文字のみの場合は大文字・小文字を区別せず検索する
set ignorecase

# 検索文字列に大文字が含まれている場合は大文字・小文字を区別して検索する
set smartcase

# インクリメンタル検索を有効化する
set incsearch

# 検索ワードとマッチするテキストをハイライト表示する
set hlsearch

# ESC キーの2度押しで検索ワードとマッチしたテキストのハイライト表示を消す
nnoremap <silent> <ESC><ESC> :nohlsearch<CR>

# -------------------------------------------------------------------------------------------
# 外観
# -------------------------------------------------------------------------------------------

# 24ビットカラー(トゥルーカラー)サポートを有効にする
set termguicolors

# ターミナル内での Vim において、モードごとのカーソル形状の変化を gVim と同様にする
# この設定は set termguicolors または set t_Co=256 の後に置く ( https://vim-jp.org/vimdoc-ja/term.html#termcap-cursor-shape )
# DECSCUSR エスケープシーケンスを使用する
&t_SI = "\e[5 q"    # バー点滅
&t_SR = "\e[3 q"    # 下線点滅
&t_EI = "\e[1 q"    # ブロック点滅
&t_ti ..= "\e[1 q"  # ブロック点滅
&t_te ..= "\e[0 q"  # デフォルト (端末に依存するが、通常はブロック点滅)
# すぐにカーソル形状を切り替える
set ttimeoutlen=10

# シンタックスハイライトを有効化する (カラースキームの設定より上に置く)
syntax enable

# カラースキーム ( https://qiita.com/sff1019/items/3f73856b78d7fa2731c7 )
# Selenized Light
set background=light
# Selenized Dark
#set background=dark
# Selenized ( https://github.com/jan-warchol/selenized/tree/master/editors/vim )
colorscheme selenized

# ステータスラインの設定
# ステータスラインを常に表示する
set laststatus=2
# ヘルプページなら[help]と表示する
set statusline+=%h
# プレビューウィンドウなら[Preview]と表示する
set statusline+=%w
# 開いているファイルのフルパスを表示する
set statusline+=%F
# 読み込み専用かどうかを表示する
set statusline+=%r
# バッファ番号を表示する
set statusline+=[%n]
# 開いているファイルの内容に保存されていない変更があるかを表示する
set statusline+=%m
# これより以下の設定はステータスラインの右側に表示される
set statusline+=%=
# 開いているファイルのタイプを表示する
set statusline+=%y
# 開いているファイルの文字コードが設定されている場合はそのファイルの文字コードを表示し、設定されていないなら Vim の文字コードを表示する、また、そのファイルのファイルフォーマットも表示する
set statusline+=%{'['.(&fenc!=''?&fenc:&enc).':'.&ff.']'}
# 開いているファイルについて、[現在行数/全行数]を表示する
set statusline+=[LOW=%l/%L]

